// Full Hiragana set
const cards = [
  { front: "„ÅÇ", back: "a" }, { front: "„ÅÑ", back: "i" }, { front: "„ÅÜ", back: "u" }, { front: "„Åà", back: "e" }, { front: "„Åä", back: "o" },
  { front: "„Åã", back: "ka" }, { front: "„Åç", back: "ki" }, { front: "„Åè", back: "ku" }, { front: "„Åë", back: "ke" }, { front: "„Åì", back: "ko" },
  { front: "„Åï", back: "sa" }, { front: "„Åó", back: "shi" }, { front: "„Åô", back: "su" }, { front: "„Åõ", back: "se" }, { front: "„Åù", back: "so" },
  { front: "„Åü", back: "ta" }, { front: "„Å°", back: "chi" }, { front: "„Å§", back: "tsu" }, { front: "„Å¶", back: "te" }, { front: "„Å®", back: "to" },
  { front: "„Å™", back: "na" }, { front: "„Å´", back: "ni" }, { front: "„Å¨", back: "nu" }, { front: "„Å≠", back: "ne" }, { front: "„ÅÆ", back: "no" },
  { front: "„ÅØ", back: "ha" }, { front: "„Å≤", back: "hi" }, { front: "„Åµ", back: "fu" }, { front: "„Å∏", back: "he" }, { front: "„Åª", back: "ho" },
  { front: "„Åæ", back: "ma" }, { front: "„Åø", back: "mi" }, { front: "„ÇÄ", back: "mu" }, { front: "„ÇÅ", back: "me" }, { front: "„ÇÇ", back: "mo" },
  { front: "„ÇÑ", back: "ya" }, { front: "„ÇÜ", back: "yu" }, { front: "„Çà", back: "yo" },
  { front: "„Çâ", back: "ra" }, { front: "„Çä", back: "ri" }, { front: "„Çã", back: "ru" }, { front: "„Çå", back: "re" }, { front: "„Çç", back: "ro" },
  { front: "„Çè", back: "wa" }, { front: "„Çí", back: "wo" }, { front: "„Çì", back: "n" }
];

// State
let deck = [];
let remainingDeck = [];
let current = 0;
let flipped = false;
let mode = '';
let progress = JSON.parse(localStorage.getItem("progress")) || {};
cards.forEach(c => {
  if (!progress[c.front]) progress[c.front] = { correct: 0, wrong: 0 };
});

const cardEl = document.getElementById("card");
const controlsEl = document.getElementById("controls");
const progressEl = document.getElementById("progress");
const titlePage = document.getElementById("title-page");
const appPage = document.getElementById("app");

// --- UTILITIES ---
function showCard() {
  cardEl.textContent = flipped ? deck[current].back : deck[current].front;
}

cardEl.addEventListener("click", () => {
  flipped = !flipped;
  showCard();
});

function shuffleDeck(d) {
  return [...d].sort(() => Math.random() - 0.5);
}

// --- PROGRESS DISPLAY ---
function updateProgress() {
  let totalCorrect = 0, totalWrong = 0;
  let details = '';
  cards.forEach(c => {
    totalCorrect += progress[c.front].correct;
    totalWrong += progress[c.front].wrong;
    details += `${c.front}: ‚úÖ${progress[c.front].correct} ‚ùå${progress[c.front].wrong}\n`;
  });

  progressEl.innerHTML = `Total: ‚úÖ${totalCorrect} | ‚ùå${totalWrong} 
    <button onclick="toggleDetails()">Show Details</button>
    <div class="progress-details" id="details" style="display:none;">${details}</div>`;
  localStorage.setItem("progress", JSON.stringify(progress));
}

function toggleDetails() {
  const detailsDiv = document.getElementById("details");
  detailsDiv.style.display = detailsDiv.style.display === 'none' ? 'block' : 'none';
}

// --- MARK CARDS ---
function markCorrect() {
  const front = deck[current].front;
  progress[front].correct++;
  updateProgress();
  nextCard();
}

function markWrong() {
  const front = deck[current].front;
  progress[front].wrong++;
  updateProgress();
  nextCard();
}

// --- RESET ---
function resetProgress() {
  cards.forEach(c => progress[c.front] = { correct: 0, wrong: 0 });
  updateProgress();
}

// --- MODES ---
function startMode(selectedMode) {
  mode = selectedMode;
  titlePage.style.display = "none";
  appPage.style.display = "block";

  switch (mode) {
    case 'learn-all':
      deck = shuffleDeck(cards);
      remainingDeck = [...deck];
      setupFlipControls();
      break;
    case 'learn-hard':
      deck = shuffleDeck(cards.filter(c => progress[c.front].wrong > 0));
      if (deck.length === 0) deck = shuffleDeck(cards);
      remainingDeck = [...deck];
      setupFlipControls();
      break;
    case 'quiz':
      deck = shuffleDeck(cards);
      setupQuizControls();
      break;
  }

  current = 0;
  flipped = false;
  showCard();
  updateProgress();
}

function goHome() {
  appPage.style.display = "none";
  titlePage.style.display = "block";
}

// --- CONTROL SETUPS ---
function setupFlipControls() {
  controlsEl.innerHTML = `
    <button onclick="markCorrect()">‚úÖ Correct</button>
    <button onclick="markWrong()">‚ùå Wrong</button>
    <button onclick="remainingDeck=shuffleDeck(deck); current=0; showCard();">üîÄ Shuffle</button>
    <button onclick="resetProgress()">‚ôªÔ∏è Reset Progress</button>
  `;
}

function setupQuizControls() {
  controlsEl.innerHTML = `
    <input type="text" id="answer" placeholder="Type Romaji">
    <button onclick="checkAnswer()">Submit</button>
    <button onclick="deck=shuffleDeck(deck); current=0; showCard();">üîÄ Shuffle</button>
    <button onclick="resetProgress()">‚ôªÔ∏è Reset Progress</button>
    <div id="feedback" style="margin-top:10px;font-weight:bold;"></div>
  `;
}

// --- FLIPCARDS ROUND HANDLING ---
function nextCard() {
  if (mode === 'learn-all' || mode === 'learn-hard') {
    remainingDeck.splice(current, 1); // remove current card

    if (remainingDeck.length === 0) {
      alert("üéâ Round completed! You have seen all cards.");
      remainingDeck = [...deck];
      deck = shuffleDeck(deck);
      current = 0;
    } else {
      current = Math.floor(Math.random() * remainingDeck.length);
    }
    flipped = false;
    showCard();
  } else {
    // Quiz mode behavior
    current = (current + 1) % deck.length;
    flipped = false;
    showCard();
  }
}

// --- QUIZ MODE ---
function checkAnswer() {
  const answerInput = document.getElementById("answer");
  const ans = answerInput.value.trim().toLowerCase();
  const front = deck[current].front;
  const feedbackEl = document.getElementById("feedback");

  if (ans === deck[current].back.toLowerCase()) {
    progress[front].correct++;
    feedbackEl.textContent = "‚úÖ Correct!";
    feedbackEl.style.color = "green";
  } else {
    progress[front].wrong++;
    feedbackEl.textContent = `‚ùå Wrong! Correct: ${deck[current].back}`;
    feedbackEl.style.color = "red";
  }

  answerInput.value = '';
  updateProgress();
  nextCard();
}